import District, { IDistrict } from "../models/district.model";
import Student from "../models/student.model";
import StudentResult from "../models/studentResult.model";
import School from "../models/school.model";
import Teacher from "../models/teacher.model";

export const checkExistingDistrict = async (district: IDistrict): Promise<boolean> => {
    try {
        const foundedDistrict = await District.find({ code: district.code });
        return foundedDistrict.length > 0;
    } catch (error) {
        console.error(error);
        return true;
    }
}

export const checkExistingDistricts = async (codes: number[]): Promise<IDistrict[]> => {
    try {
        console.log("üîç –ü–æ–∏—Å–∫ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –∫–æ–¥–∞–º...");
        const result = await District.find({ code: { $in: codes } });
        return result;
    } catch (error) {
        console.error(error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫!");
    }
}

export const checkExistingDistrictCodes = async (codes: number[]): Promise<number[]> => {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º .distinct() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
        const existingCodes = await District.distinct("code", { code: { $in: codes } });
        return existingCodes;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫!");
    }
};

export const countDistrictsRates = async (): Promise<void> => {
    try {
        console.log("üîÑ –ü–æ–¥—Å—á—ë—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞–π–æ–Ω–æ–≤...");

        const studentResults = await StudentResult.find().populate("student exam");

        const districtCounts = new Map<string, number>();
        const examDistrictIds = new Set<string>();
        for (const result of studentResults) {
            const districtId = result.student.district?.toString();
            const examId = result.exam?.toString();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É —Ä–∞–π–æ–Ω-—ç–∫–∑–∞–º–µ–Ω, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–ø—É +1
            if (districtId && examId) {
                const examDistrictId = `${examId}-${districtId}`;
                if (!examDistrictIds.has(examDistrictId)) {
                    examDistrictIds.add(examDistrictId);
                    districtCounts.set(districtId, (districtCounts.get(districtId) || 0) + 1);
                }
            }
        }

        const bulkUpdates = Array.from(districtCounts.entries()).map(([districtId, rate]) => ({
            updateOne: {
                filter: { _id: districtId },
                update: { rate },
            },
        }));

        if (bulkUpdates.length > 0) {
            await District.bulkWrite(bulkUpdates);
        }

        console.log("‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–π–æ–Ω–æ–≤ –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã!");
    } catch (error) {
        console.error(error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏!");
    }
}

export const deleteDistrictById = async (id: string) => {
    try {
        // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø–æ—Ç–æ–º —É—á–∏—Ç–µ–ª–µ–π, –ø–æ—Ç–æ–º —à–∫–æ–ª—ã, –∞ –ø–æ—Ç–æ–º —É–∂–µ —Å–∞–º —Ä–∞–π–æ–Ω
        const students = await Student.find({ district: id });
        const studentIds = students.map(student => student._id);
        await StudentResult.deleteMany({ student: { $in: studentIds } });
        await Student.deleteMany({ district: id });
        await School.deleteMany({ district: id });
        await Teacher.deleteMany({ district: id });
        await District.findByIdAndDelete(id);
    } catch (error) {
        throw error;
    }
}