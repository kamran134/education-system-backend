import { DeleteResult } from "mongoose";
import Exam from "../models/exam.model";
import Student, { IStudent, IStudentInput } from "../models/student.model";
import StudentResult, { IStudentResult, IStudentResultsGrouped } from "../models/studentResult.model";
import { calculateLevel, calculateLevelNumb } from "./common.service";
import { getExamsByMonthYear } from "./exam.service";
import { assignTeacherToStudent } from "./student.service";

export const processStudentResults = async (studentDataToInsert: IStudentInput[]): 
    Promise<{students: IStudent[], studentsWithoutTeacher: number[]}> => {
    try {
        const studentCodes: number[] = studentDataToInsert.map(item => item.code);
        const existingStudents: IStudent[] = await Student.find({ code: { $in: studentCodes } });
        const newStudents = studentDataToInsert.filter(student => !existingStudents.map(d => d.code).includes(student.code));

        // Assign teacher to student
        await Promise.all(newStudents.map(async (student) => {
            await assignTeacherToStudent(student);
        }));

        const studentsWithTeacher: IStudentInput[] = newStudents.filter(student => student.teacher);
        const studentsWithoutTeacher: number[] = newStudents.filter(student => !student.teacher).map(student => student.code);
        
        const newStudentsDocs = await Student.insertMany(studentsWithTeacher);
        const newStudentsIds: IStudent[] = newStudentsDocs.map(doc => doc.toObject() as IStudent);
        const allStudents: IStudent[] = existingStudents.concat(newStudentsIds);
        return {students: allStudents, studentsWithoutTeacher};
    } catch (error) {
        throw error;
    }
}

export const markAllDevelopingStudents = async (): Promise<void> => {
    try {
        /*
        1. –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        2. –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —ç–∫–∑–∞–º–µ–Ω–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ (StudentResult), –æ–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        4. –ï—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —ç—Ç–∞–ø–µ –ø–æ–¥–Ω—è–ª—Å—è —É—Ä–æ–≤–µ–Ω—å, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "ƒ∞nki≈üaf ed…ôn ≈üagird" –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        5. –ï—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è, —Ç–æ —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        –í–ê–ñ–ù–û! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞—Ä–Ω–æ, –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
        –ï—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        –í–ê–ñ–ù–û! –ù–∞–º –Ω–µ –Ω—É–∂–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ú—ã –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –ø–æ —Ü–∏–∫–ª—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        */
        console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...");
        
        const studentResultsGrouped: IStudentResultsGrouped[] = await getStudentResultsGroupedByStudent();
        if (studentResultsGrouped.length === 0) return;
        const bulkOperations = [];

        console.log("–ù–∞–π–¥–µ–Ω–æ ", studentResultsGrouped.length, " —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤.");

        for (const student of studentResultsGrouped) {
            if (student.results.length <= 1) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

            // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
            student.results[0].status = "";
            student.results[0].score = 1;

            let maxTotalScore = student.results[0].totalScore;
            let maxLevel = calculateLevelNumb(maxTotalScore);

            for (let i = 1; i < student.results.length; i++) {
                const currentResult = student.results[i];

                // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
                currentResult.status = "";
                currentResult.score = 1;

                if (calculateLevelNumb(currentResult.totalScore) > maxLevel) {
                    currentResult.status = "ƒ∞nki≈üaf ed…ôn ≈üagird";
                    currentResult.score += 10;
                    maxLevel = calculateLevelNumb(currentResult.totalScore);
                    maxTotalScore = currentResult.totalScore;
                }

                bulkOperations.push({
                    updateOne: {
                        filter: { _id: currentResult._id },
                        update: { $set: { status: currentResult.status, score: currentResult.score } }
                    }
                });
            }
        }

        // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (bulkOperations.length > 0) {
            await StudentResult.bulkWrite(bulkOperations);
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${bulkOperations.length} —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.`);
        } else {
            console.log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        }

        console.log("‚úÖ –°—Ç–∞—Ç—É—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ markAllDevelopingStudents:", error);
    }
}

export const markDevelopingStudents = async (month: number, year: number): Promise<void> => {
    try {
        console.log(`üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ ${month}/${year}...`);

        // 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞)
        const endDate = new Date(year, month - 1, 31, 23, 59, 59, 999);

        // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
        const exams = await Exam.find({
            date: { $lte: endDate }
        });

        if (!exams.length) {
            console.log("–ù–µ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.");
            return;
        }

        // 3Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º ID —ç–∫–∑–∞–º–µ–Ω–æ–≤
        const examIds = exams.map(exam => exam._id);

        // 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∏–º —ç–∫–∑–∞–º–µ–Ω–∞–º
        const results: IStudentResult[] = await StudentResult.find({
            exam: { $in: examIds }
        }).populate("student").populate("exam");

        if (!results.length) {
            console.log("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.");
            return;
        }

        // 5Ô∏è‚É£ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        const studentResultsGrouped: Record<string, IStudentResult[]> = results.reduce((acc, result) => {
            const studentId: string = String(result.student._id);
            if (!acc[studentId]) {
                acc[studentId] = [];
            }
            acc[studentId].push(result);
            return acc;
        }, {} as Record<string, IStudentResult[]>);

        const bulkOperations = [];

        // 6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        for (const studentId in studentResultsGrouped) {
            const studentResults = studentResultsGrouped[studentId];

            // console.log("stud results: ", studentResults);
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–∞–º–µ–Ω—ã –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
            studentResults.sort((a, b) => a.exam.date.getTime() - b.exam.date.getTime());

            // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
            //studentResults[studentResults.length - 1].status = "";

            if (studentResults.length <= 1) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å 1 —ç–∫–∑–∞–º–µ–Ω–æ–º

            // 7Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã
            const maxPreviousTotalScore = Math.max(
                ...studentResults.slice(0, -1).map(r => r.totalScore)
            );

            const currentResult = studentResults[studentResults.length - 1];

            // 8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
            if (currentResult.totalScore > maxPreviousTotalScore) {
                const previousLevel = calculateLevel(maxPreviousTotalScore);
                const currentLevel = calculateLevel(currentResult.totalScore);

                if (previousLevel !== currentLevel) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 10 –æ—á–∫–æ–≤
                    const updatedStatus = currentResult.status
                        ? `${currentResult.status}, ƒ∞nki≈üaf ed…ôn ≈üagird`
                        : "ƒ∞nki≈üaf ed…ôn ≈üagird";

                    bulkOperations.push({
                        updateOne: {
                            filter: { _id: currentResult._id },
                            update: { $set: { status: updatedStatus }, $inc: { score: 10 } }
                        }
                    });
                }
            }
        }

        // 9Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (bulkOperations.length > 0) {
            await StudentResult.bulkWrite(bulkOperations);
            console.log(`‚úÖ ${bulkOperations.length} n…ôf…ôr inki≈üaf ed…ôn ≈üagird.`);
        } else {
            console.log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ markDevelopingStudents:", error);
    }
};

export const markTopStudents = async (month: number, year: number): Promise<void> => {
    const exams = await getExamsByMonthYear(month, year);

    if (!exams || !exams.length) {
        console.log("–ù–µ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.");
        return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —ç–∫–∑–∞–º–µ–Ω–æ–≤
    const examIds = exams.map(exam => exam._id);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º
    const results: IStudentResult[] = await StudentResult.find({
        exam: { $in: examIds }
    }).populate<{ student: IStudent }>("student");

    if (!results || !results.length) {
        console.log("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.");
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
    const districtGradeGroups: Record<string, IStudentResult[]> = results.reduce((acc, result) => {
        if (!result.student || !result.student.district || result.student.grade === undefined || result.student.grade === null) {
            console.warn("–°—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", result);
            return acc;
        }

        const districtId = result.student.district?.toString();
        const grade = result.student.grade;

        const groupKey = `${districtId}-${grade}`;

        if (!acc[groupKey]) {
            acc[groupKey] = [];
        }
        acc[groupKey].push(result);
        return acc;
    }, {} as Record<string, IStudentResult[]>);

    // –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const bulkOperations = [];

    for (const groupKey in districtGradeGroups) {
        const groupResults = districtGradeGroups[groupKey];

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π totalScore –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ
        const maxTotalScore = Math.max(...groupResults.map(r => r.totalScore));
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ª–∏—Ü–µ–π–Ω—ã–π, —Ç–æ —ç—Ç–æ –Ω–µ —É—Å–ø–µ—Ö
        if (maxTotalScore < 47) continue;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
        const topStudents = groupResults.filter(r => r.totalScore === maxTotalScore);

        for (const studentResult of topStudents) {
            const updatedStatus = studentResult.status
                ? `${studentResult.status}, Ayƒ±n ≈üagirdi`
                : "Ayƒ±n ≈üagirdi";

            bulkOperations.push({
                updateOne: {
                    filter: { _id: studentResult._id },
                    update: { $set: { status: updatedStatus}, $inc: { score: 5 } }
                }
            });
        }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (bulkOperations.length > 0) {
        await StudentResult.bulkWrite(bulkOperations);
        console.log(`${bulkOperations.length} n…ôf…ôr ayƒ±n ≈üagirdi tapƒ±ldƒ±.`);
    } else {
        console.log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }
}

export async function markTopStudentsRepublic(month: number, year: number): Promise<void> {
    const exams = await getExamsByMonthYear(month, year);

    if (!exams || !exams.length) {
        console.log("–ù–µ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.");
        return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —ç–∫–∑–∞–º–µ–Ω–æ–≤
    const examIds = exams.map(exam => exam._id);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º
    const results: IStudentResult[] = await StudentResult.find({
        exam: { $in: examIds }
    });

    if (!results || !results.length) {
        console.log("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.");
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
    const gradeGroups: Record<number, IStudentResult[]> = results.reduce((acc, result) => {
        const grade = result.grade;
        if (grade === undefined || grade === null) {
            console.warn("–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", result);
            return acc;
        }

        if (!acc[grade]) {
            acc[grade] = [];
        }
        acc[grade].push(result);
        return acc;
    }, {} as Record<number, IStudentResult[]>);

    const bulkOperations = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É –∏ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
    for (const grade in gradeGroups) {
        const gradeResults = gradeGroups[grade];

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π totalScore –ø–æ –≤—Å–µ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–µ
        const maxTotalScore = Math.max(...gradeResults.map(r => r.totalScore));

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
        const topStudents = gradeResults.filter(r => r.totalScore === maxTotalScore);

        for (const studentResult of topStudents) {
            const updatedStatus = studentResult.status
                ? `${studentResult.status}, Respublika √ºzr…ô ayƒ±n ≈üagirdi`
                : "Respublika √ºzr…ô ayƒ±n ≈üagirdi";

            bulkOperations.push({
                updateOne: {
                    filter: { _id: studentResult._id },
                    update: { $set: { status: updatedStatus }, $inc: { score: 5 } }
                }
            });
        }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (bulkOperations.length > 0) {
        const result = await StudentResult.bulkWrite(bulkOperations);
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.modifiedCount} –∑–∞–ø–∏—Å–µ–π.`);
    } else {
        console.log("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
    }
}

async function getStudentResultsGroupedByStudent(): Promise<IStudentResultsGrouped[]> {
    return await StudentResult.aggregate([
        {
            $lookup: {
                from: "students",
                localField: "student",
                foreignField: "_id",
                as: "student"
            }
        },
        { $unwind: "$student" },
        {
            $lookup: {
                from: "exams",
                localField: "exam",
                foreignField: "_id",
                as: "exam"
            }
        },
        { $unwind: "$exam" },
        { $sort: { "exam.date": 1 } },
        {
            $group: {
                _id: "$student._id",
                student: { $first: "$student" },
                results: {
                    $push: {
                        _id: "$_id",
                        exam: "$exam",
                        grade: "$grade",
                        disciplines: "$disciplines",
                        totalScore: "$totalScore",
                        score: "$score",
                        level: "$level",
                        status: "$status"
                    }
                }
            }
        },
        {
            $project: {
                _id: 0,
                student: 1,
                results: 1
            }
        }
    ]) as IStudentResultsGrouped[];
}

export const deleteStudentResultsByExamId = async (examId: string): Promise<DeleteResult> => {
    try {
        return await StudentResult.deleteMany({ exam: examId });
    } catch (error) {
        throw error;
    }
}

export const deleteStudentResultsByExams = async (examIds: string[]): Promise<DeleteResult> => {
    try {
        return await StudentResult.deleteMany({ exam: { $in: examIds } });
    } catch (error) {
        throw error;
    }
}

export const deleteStudentResultsByStudentId = async (studentId: string): Promise<DeleteResult> => {
    try {
        return await StudentResult.deleteMany({ student: studentId });
    } catch (error) {
        throw error;
    }
}

export const deleteStudentResultsByStudents = async (studentIds: string[]): Promise<DeleteResult> => {
    try {
        return await StudentResult.deleteMany({ student: { $in: studentIds } });
    } catch (error) {
        throw error;
    }
}